// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go github.com/sliide/cluster-api/api/core/v1alpha2

package v1alpha2

import (
	capierrors "github.com/sliide/cluster-api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

/// [MachineSetSpec]
// MachineSetSpec defines the desired state of MachineSet
MachineSetSpec: {
	// Replicas is the number of desired replicas.
	// This is a pointer to distinguish between explicit zero and unspecified.
	// Defaults to 1.
	// +optional
	replicas?: null | int32 @go(Replicas,*int32)

	// MinReadySeconds is the minimum number of seconds for which a newly created machine should be ready.
	// Defaults to 0 (machine will be considered available as soon as it is ready)
	// +optional
	minReadySeconds?: int32 @go(MinReadySeconds)

	// DeletePolicy defines the policy used to identify nodes to delete when downscaling.
	// Defaults to "Random".  Valid values are "Random, "Newest", "Oldest"
	// +kubebuilder:validation:Enum=Random;Newest;Oldest
	deletePolicy?: string @go(DeletePolicy)

	// Selector is a label query over machines that should match the replica count.
	// Label keys and values that must match in order to be controlled by this MachineSet.
	// It must match the machine template's labels.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
	selector: metav1.LabelSelector @go(Selector)

	// Template is the object that describes the machine that will be created if
	// insufficient replicas are detected.
	// Object references to custom resources resources are treated as templates.
	// +optional
	template?: MachineTemplateSpec @go(Template)
}

/// [MachineTemplateSpec]
// MachineTemplateSpec describes the data needed to create a Machine from a template
MachineTemplateSpec: {
	// Standard object's metadata.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
	// +optional
	metadata?: ObjectMeta @go(ObjectMeta)

	// Specification of the desired behavior of the machine.
	// More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#spec-and-status
	// +optional
	spec?: MachineSpec @go(Spec)
}

// MachineSetDeletePolicy defines how priority is assigned to nodes to delete when
// downscaling a MachineSet. Defaults to "Random".
MachineSetDeletePolicy: string // enumMachineSetDeletePolicy

enumMachineSetDeletePolicy:
	RandomMachineSetDeletePolicy |
	NewestMachineSetDeletePolicy |
	OldestMachineSetDeletePolicy

// RandomMachineSetDeletePolicy prioritizes both Machines that have the annotation
// "cluster.x-k8s.io/delete-machine=yes" and Machines that are unhealthy
// (Status.ErrorReason or Status.ErrorMessage are set to a non-empty value).
// Finally, it picks Machines at random to delete.
RandomMachineSetDeletePolicy: MachineSetDeletePolicy & "Random"

// NewestMachineSetDeletePolicy prioritizes both Machines that have the annotation
// "cluster.x-k8s.io/delete-machine=yes" and Machines that are unhealthy
// (Status.ErrorReason or Status.ErrorMessage are set to a non-empty value).
// It then prioritizes the newest Machines for deletion based on the Machine's CreationTimestamp.
NewestMachineSetDeletePolicy: MachineSetDeletePolicy & "Newest"

// OldestMachineSetDeletePolicy prioritizes both Machines that have the annotation
// "cluster.x-k8s.io/delete-machine=yes" and Machines that are unhealthy
// (Status.ErrorReason or Status.ErrorMessage are set to a non-empty value).
// It then prioritizes the oldest Machines for deletion based on the Machine's CreationTimestamp.
OldestMachineSetDeletePolicy: MachineSetDeletePolicy & "Oldest"

/// [MachineSetStatus]
// MachineSetStatus defines the observed state of MachineSet
MachineSetStatus: {
	// Selector is the same as the label selector but in the string format to avoid introspection
	// by clients. The string will be in the same format as the query-param syntax.
	// More info about label selectors: http://kubernetes.io/docs/user-guide/labels#label-selectors
	// +optional
	selector?: string @go(Selector)

	// Replicas is the most recently observed number of replicas.
	replicas: int32 @go(Replicas)

	// The number of replicas that have labels matching the labels of the machine template of the MachineSet.
	// +optional
	fullyLabeledReplicas?: int32 @go(FullyLabeledReplicas)

	// The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is "Ready".
	// +optional
	readyReplicas?: int32 @go(ReadyReplicas)

	// The number of available replicas (ready for at least minReadySeconds) for this MachineSet.
	// +optional
	availableReplicas?: int32 @go(AvailableReplicas)

	// ObservedGeneration reflects the generation of the most recently observed MachineSet.
	// +optional
	observedGeneration?: int64 @go(ObservedGeneration)

	// In the event that there is a terminal problem reconciling the
	// replicas, both ErrorReason and ErrorMessage will be set. ErrorReason
	// will be populated with a succinct value suitable for machine
	// interpretation, while ErrorMessage will contain a more verbose
	// string suitable for logging and human consumption.
	//
	// These fields should not be set for transitive errors that a
	// controller faces that are expected to be fixed automatically over
	// time (like service outages), but instead indicate that something is
	// fundamentally wrong with the MachineTemplate's spec or the configuration of
	// the machine controller, and that manual intervention is required. Examples
	// of terminal errors would be invalid combinations of settings in the
	// spec, values that are unsupported by the machine controller, or the
	// responsible machine controller itself being critically misconfigured.
	//
	// Any transient errors that occur during the reconciliation of Machines
	// can be added as events to the MachineSet object and/or logged in the
	// controller's output.
	// +optional
	errorReason?: null | capierrors.MachineSetStatusError @go(ErrorReason,*capierrors.MachineSetStatusError)

	// +optional
	errorMessage?: null | string @go(ErrorMessage,*string)
}

/// [MachineSet]
// MachineSet is the Schema for the machinesets API
MachineSet: metav1.TypeMeta & {
	metadata?: metav1.ObjectMeta @go(ObjectMeta)
	spec?:     MachineSetSpec    @go(Spec)
	status?:   MachineSetStatus  @go(Status)
}

// MachineSetList contains a list of MachineSet
MachineSetList: metav1.TypeMeta & {
	metadata?: metav1.ListMeta @go(ListMeta)
	items: [...MachineSet] @go(Items,[]MachineSet)
}
